//------------------------------------------------------------------------------
// File: Errors.h
//------------------------------------------------------------------------------

//! Классы для хранения и транспортировки сообщений о исключениях.
/*!
    \author User
    \file Errors.h
*/

#pragma once
/*
	Description of VideoSubSystem errors routines
*/
#include <windows.h>

#include <iostream>
#include <vector>



#include "AdvancedLogger.h"

//---------------------------------------------------------------------------------------------------------------------------------------
/**
* @enum EErrorLevel
* Перечисление возможных уровней исключительных ситуаций
*/
/// Перечисление возможных уровней исключительных ситуаций
enum EErrorLevel
{
	NOLEVEL		= 0,
	USER		= 1,	///< Пользовательская ошибка. Сообщение отдается наружу библиотеки и записывается в log-файл.
	APPLICATION	= 2,	///< Ошибка работы приложения. Сообщение отдается наружу библиотеки и записывается в log-файл.
	SYSTEM		= 3		///< Системная ошибка.	Сообщение записывается в log-файл.
};
//---------------------------------------------------------------------------------------------------------------------------------------

//---------------------------------------------------------------------------------------------------------------------------------------
/**
* @class CErrorsDesriptor 
* Класс предназначен для сохранения информации о произошедшем исключении для дальнейшей передачи этой информации на обработку
*/
/// Класс-описатель исключительной ситуации
class CErrorsDesriptor
{
public:
	std::string ErrorID;				///< Идентификатор ошибки
	std::string ErrorDescription;	///< Описание ошибки
	int ErrorCode;				///< Код ошибки
	std::string ErrorPoint;			///< Описание места (класса/объекта/библиотеки), в котором возникла ошибка
	EErrorLevel ErrorLevel;		///< Уровень ошибки
	

	void clear()				
	{
		ErrorID.clear();
		ErrorDescription.clear();
		ErrorCode = 0;
		ErrorPoint.clear();
		ErrorLevel = NOLEVEL;
	}							///< Очистка объекта
};
//---------------------------------------------------------------------------------------------------------------------------------------
/**
* @class CErrorsTransport 
* Класс предназначен для транспортировки объектов-описателей ошибок CErrorsDesriptor между различными уровнями приложения.
* Позволяет передавать сообщения об исключениях на более высокий уровень
*/
/// Класс-транспортировщик сообщений об исключительных ситуациях
class CErrorsTransport
{
public:
	/// @name Контруктор/Деструктор
	/// @{
	CErrorsTransport();
	CErrorsTransport(COutputLogFilePath OutputFileParams, CLogDestination LogsOutput);


	~CErrorsTransport();
	/// @}

	void ErrorOccured(std::string ErrID, std::string ErrPoint, EErrorLevel Errlevel);	/**<
																			* \brief Установка идентификатора произошедшей ошибки и флага об ошибке
																			*
																			*	@param ErrID - Идентификатор исключительной ситуации
																			*	@param ErrPoint - Место возникновения исключительной ситуации
																			*	@param Errlevel - уровнь ошибки
																			*/
	void SetErrorDescription(const std::string & ErrorDescription);	// Установка сообщения об ошибке

	int IsErrorOccured() {return HasErrorOccured;}	/**<
													* \brief Получение флага о произошедшей ошибки
													*
													* @return TRUE, если исключительная ситуация имела место быть, FALSE - если исключительная ситуация не возникала
													*/
	std::string GetCurrentErrorID();	/**<
								* \brief Получение идентификатора произошедшей ошибки
								*
								* @return Значение идентификатора ошибки
								*/
	std::string GetCurrentErrorPoint();	/**<
									* \brief Получение информации о месте, где произошла исключительная ситуация
									*
									* @return Строку, в которой указано место возникновения исключительной ситуации
									*/
	EErrorLevel GetCurrentErrorLevel();	/**<
										* \brief Получение уровня возникшей ошибки
										*
										* @return Уровень произошедшей исключительной ситуации
										*/
	
	std::string GetCurrentErrorDescription();

	void clear() { this->ClearObject(); }	///< brief Очистка объекта

	void WriteErrorToLogFile();	///< Запись информации об ошибке в Log-файл

private:

	void ClearObject();					///< brief Очистка объекта

	void SetErrorID(std::string ID);	/**<
								* \brief Установка идентификатора исключительной ситуации
								*
								* @param ID - текстовый идентификатор исключительной ситуации
								*/
	void SetErrorPoint(std::string Point);/**<
									 * \brief Установка места возникновения исключительной ситуации
									 *
									 * @param Point - текстовое описание места возникновения исключительной ситуации
									 */
	void SetErrorLevel(EErrorLevel ErrLev);	/**<
											* \brief Установка уровня исключительной ситуации
											*
											* @param ErrLev - значение уровня исключительной ситуации
											*/

	CErrorsDesriptor Error;	///< Идентификатор возвращаемой исключительной ситуации. Возвращаются значения ErrorID и ErrorPoint 

	std::vector<CErrorsDesriptor> ErrorsList;	/**< 
											* \brief Список возвращаемых исключительных ситуаций
											* 
											* Заполняется по мере передачи объекта по различным уровням приложения
											*/

	int HasErrorOccured;	/**< 
							* \brief Признак, возникала ли исключительная ситуация?
							*
							* Признак, была ли исключительная ситуация?	0 - не было, 1 - была.
							* В этом классе у этого класса используются только поля ErrorID и ErrorPoint 
							*/

	CAdvancedLogger Logger;	///< Объект для записи ошибок в файл

};
//---------------------------------------------------------------------------------------------------------------------------------------
